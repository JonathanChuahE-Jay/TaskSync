views

from django.utils import timezone
from django.db.models import Q
from rest_framework import viewsets, generics, permissions, status, filters
from rest_framework.decorators import action
from rest_framework.response import Response
from django_filters.rest_framework import DjangoFilterBackend
from ..models import (
    Project, Milestone, Task, Tag, Comment, 
    TaskAttachment, TaskHistory, ProjectTemplate
)
from .serializers import (
    ProjectSerializer, MilestoneSerializer, TaskSerializer, TagSerializer,
    CommentSerializer, TaskAttachmentSerializer, ProjectTemplateSerializer
)

class IsOwnerOrTeamMemberOrReadOnly(permissions.BasePermission):
    def has_object_permission(self, request, view, obj):
        # Read permissions are allowed to any request
        if request.method in permissions.SAFE_METHODS:
            return True
        
        # Write permissions are only allowed to the owner or team members
        if isinstance(obj, Project):
            return request.user == obj.owner or request.user in obj.team_members.all()
        
        # For other objects, check if the user is owner or team member of the related project
        project = None
        if isinstance(obj, Milestone):
            project = obj.project
        elif isinstance(obj, Task):
            project = obj.project
        
        if project:
            return request.user == project.owner or request.user in project.team_members.all()
        
        return False

class ProjectViewSet(viewsets.ModelViewSet):
    queryset = Project.objects.all()
    serializer_class = ProjectSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwnerOrTeamMemberOrReadOnly]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['status', 'owner', 'team_members']
    search_fields = ['title', 'description']
    ordering_fields = ['created_at', 'due_date', 'title']
    
    def get_queryset(self):
        user = self.request.user
        return Project.objects.filter(
            Q(owner=user) | Q(team_members=user)
        ).distinct()
    
    def perform_create(self, serializer):
        serializer.save(owner=self.request.user, updated_by=self.request.user)
    
    def perform_update(self, serializer):
        serializer.save(updated_by=self.request.user)
    
    @action(detail=True, methods=['post'])
    def add_team_member(self, request, pk=None):
        project = self.get_object()
        user_id = request.data.get('user_id')
        
        try:
            from django.contrib.auth.models import User
            user = User.objects.get(id=user_id)
            project.team_members.add(user)
            project.save()
            return Response({'status': 'team member added'})
        except User.DoesNotExist:
            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
    
    @action(detail=True, methods=['post'])
    def remove_team_member(self, request, pk=None):
        project = self.get_object()
        user_id = request.data.get('user_id')
        
        try:
            from django.contrib.auth.models import User
            user = User.objects.get(id=user_id)
            project.team_members.remove(user)
            project.save()
            return Response({'status': 'team member removed'})
        except User.DoesNotExist:
            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
    
    @action(detail=True, methods=['get'])
    def statistics(self, request, pk=None):
        project = self.get_object()
        
        total_tasks = project.tasks.count()
        completed_tasks = project.tasks.filter(status='completed').count()
        overdue_tasks = project.tasks.filter(
            Q(due_date__lt=timezone.now().date()) & 
            ~Q(status='completed')
        ).count()
        
        task_distribution = {}
        for status_choice in Task.STATUS_CHOICES:
            task_distribution[status_choice[0]] = project.tasks.filter(status=status_choice[0]).count()
        
        milestone_progress = []
        for milestone in project.milestones.all():
            milestone_progress.append({
                'id': milestone.id,
                'title': milestone.title,
                'progress': milestone.progress_percentage,
                'due_date': milestone.due_date
            })
        
        return Response({
            'total_tasks': total_tasks,
            'completed_tasks': completed_tasks,
            'overdue_tasks': overdue_tasks,
            'progress_percentage': project.progress_percentage,
            'task_distribution': task_distribution,
            'milestone_progress': milestone_progress
        })
    
    @action(detail=True, methods=['post'])
    def clone_from_template(self, request, pk=None):
        project = self.get_object()
        template_id = request.data.get('template_id')
        
        try:
            template = ProjectTemplate.objects.get(id=template_id)
            # Implementation of template cloning logic
            # This would create milestones and tasks based on the template
            return Response({'status': 'project cloned from template'})
        except ProjectTemplate.DoesNotExist:
            return Response({'error': 'Template not found'}, status=status.HTTP_404_NOT_FOUND)

class MilestoneViewSet(viewsets.ModelViewSet):
    queryset = Milestone.objects.all()
    serializer_class = MilestoneSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwnerOrTeamMemberOrReadOnly]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['project', 'status']
    search_fields = ['title', 'description']
    ordering_fields = ['due_date', 'created_at']
    
    def get_queryset(self):
        user = self.request.user
        return Milestone.objects.filter(
            Q(project__owner=user) | Q(project__team_members=user)
        ).distinct()
    
    def perform_create(self, serializer):
        # Ensure the user is a member or owner of the project
        project_id = self.request.data.get('project')
        project = Project.objects.get(id=project_id)
        
        if not (self.request.user == project.owner or 
                self.request.user in project.team_members.all()):
            raise permissions.PermissionDenied("You don't have permission to add milestones to this project")
        
        serializer.save()

class TaskViewSet(viewsets.ModelViewSet):
    queryset = Task.objects.all()
    serializer_class = TaskSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwnerOrTeamMemberOrReadOnly]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['project', 'milestone', 'status', 'priority', 'assignees', 'tags']
    search_fields = ['title', 'description']
    ordering_fields = ['due_date', 'created_at', 'priority']
    
    def get_queryset(self):
        user = self.request.user
        return Task.objects.filter(
            Q(project__owner=user) | 
            Q(project__team_members=user) | 
            Q(assignees=user)
        ).distinct()
    
    def perform_create(self, serializer):
        task = serializer.save(created_by=self.request.user, updated_by=self.request.user)
        
        # Create task history entry
        TaskHistory.objects.create(
            task=task,
            user=self.request.user,
            action="created task"
        )
    
    def perform_update(self, serializer):
        old_task = self.get_object()
        task = serializer.save(updated_by=self.request.user)
        
        # Track changes and create history entries
        if old_task.status != task.status:
            TaskHistory.objects.create(
                task=task,
                user=self.request.user,
                action=f"changed status from '{old_task.get_status_display()}' to '{task.get_status_display()}'"
            )
        
        if old_task.priority != task.priority:
            TaskHistory.objects.create(
                task=task,
                user=self.request.user,
                action=f"changed priority from '{old_task.get_priority_display()}' to '{task.get_priority_display()}'"
            )
        
        # If task is marked as completed now
        if old_task.status != 'completed' and task.status == 'completed':
            task.completed_at = timezone.now()
            task.completed_by = self.request.user
            task.save()
    
    @action(detail=True, methods=['post'])
    def assign(self, request, pk=None):
        task = self.get_object()
        user_id = request.data.get('user_id')
        
        try:
            from django.contrib.auth.models import User
            user = User.objects.get(id=user_id)
            task.assignees.add(user)
            task.save()
            
            TaskHistory.objects.create(
                task=task,
                user=request.user,
                action=f"assigned to {user.username}"
            )
            
            return Response({'status': 'task assigned'})
        except User.DoesNotExist:
            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
    
    @action(detail=True, methods=['post'])
    def unassign(self, request, pk=None):
        task = self.get_object()
        user_id = request.data.get('user_id')
        
        try:
            from django.contrib.auth.models import User
            user = User.objects.get(id=user_id)
            task.assignees.remove(user)
            task.save()
            
            TaskHistory.objects.create(
                task=task,
                user=request.user,
                action=f"unassigned from {user.username}"
            )
            
            return Response({'status': 'task unassigned'})
        except User.DoesNotExist:
            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
    
    @action(detail=True, methods=['post'])
    def complete(self, request, pk=None):
        task = self.get_object()
        task.status = 'completed'
        task.completed_at = timezone.now()
        task.completed_by = request.user
        task.save()
        
        TaskHistory.objects.create(
            task=task,
            user=request.user,
            action="marked as completed"
        )
        
        return Response({'status': 'task completed'})
    
    @action(detail=True, methods=['get'])
    def history(self, request, pk=None):
        task = self.get_object()
        serializer = TaskHistorySerializer(task.history.all(), many=True)
        return Response(serializer.data)

class TagViewSet(viewsets.ModelViewSet):
    queryset = Tag.objects.all()
    serializer_class = TagSerializer
    permission_classes = [permissions.IsAuthenticated]
    filter_backends = [filters.SearchFilter]
    search_fields = ['name']

class CommentViewSet(viewsets.ModelViewSet):
    queryset = Comment.objects.all()
    serializer_class = CommentSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_queryset(self):
        user = self.request.user
        return Comment.objects.filter(
            Q(task__project__owner=user) | 
            Q(task__project__team_members=user) |
            Q(task__assignees=user)
        ).distinct()
    
    def perform_create(self, serializer):
        comment = serializer.save(author=self.request.user)
        
        # Create task history entry
        TaskHistory.objects.create(
            task=comment.task,
            user=self.request.user,
            action="added a comment"
        )

class TaskAttachmentViewSet(viewsets.ModelViewSet):
    queryset = TaskAttachment.objects.all()
    serializer_class = TaskAttachmentSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_queryset(self):
        user = self.request.user
        return TaskAttachment.objects.filter(
            Q(task__project__owner=user) | 
            Q(task__project__team_members=user) |
            Q(task__assignees=user)
        ).distinct()
    
    def perform_create(self, serializer):
        # Set file metadata
        file_obj = self.request.FILES.get('file')
        
        attachment = serializer.save(
            uploaded_by=self.request.user,
            file_name=file_obj.name,
            file_size=file_obj.size,
            file_type=file_obj.content_type
        )
        
        # Create task history entry
        TaskHistory.objects.create(
            task=attachment.task,
            user=self.request.user,
            action=f"uploaded attachment: {attachment.file_name}"
        )

class ProjectTemplateViewSet(viewsets.ModelViewSet):
    queryset = ProjectTemplate.objects.all()
    serializer_class = ProjectTemplateSerializer
    permission_classes = [permissions.IsAuthenticated]
    filter_backends = [filters.SearchFilter]
    search_fields = ['title', 'description']
    
    def get_queryset(self):
        user = self.request.user
        return ProjectTemplate.objects.filter(
            Q(created_by=user) | Q(is_public=True)
        ).distinct()
    
    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)