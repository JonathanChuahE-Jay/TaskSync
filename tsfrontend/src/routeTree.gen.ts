/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as membersTaskManagementImport } from './routes/(members)/task-management'
import { Route as membersProjectManagementImport } from './routes/(members)/project-management'
import { Route as membersDashboardImport } from './routes/(members)/dashboard'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const membersTaskManagementRoute = membersTaskManagementImport.update({
  id: '/(members)/task-management',
  path: '/task-management',
  getParentRoute: () => rootRoute,
} as any)

const membersProjectManagementRoute = membersProjectManagementImport.update({
  id: '/(members)/project-management',
  path: '/project-management',
  getParentRoute: () => rootRoute,
} as any)

const membersDashboardRoute = membersDashboardImport.update({
  id: '/(members)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/(members)/dashboard': {
      id: '/(members)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof membersDashboardImport
      parentRoute: typeof rootRoute
    }
    '/(members)/project-management': {
      id: '/(members)/project-management'
      path: '/project-management'
      fullPath: '/project-management'
      preLoaderRoute: typeof membersProjectManagementImport
      parentRoute: typeof rootRoute
    }
    '/(members)/task-management': {
      id: '/(members)/task-management'
      path: '/task-management'
      fullPath: '/task-management'
      preLoaderRoute: typeof membersTaskManagementImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard': typeof membersDashboardRoute
  '/project-management': typeof membersProjectManagementRoute
  '/task-management': typeof membersTaskManagementRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard': typeof membersDashboardRoute
  '/project-management': typeof membersProjectManagementRoute
  '/task-management': typeof membersTaskManagementRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(members)/dashboard': typeof membersDashboardRoute
  '/(members)/project-management': typeof membersProjectManagementRoute
  '/(members)/task-management': typeof membersTaskManagementRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/project-management'
    | '/task-management'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/project-management'
    | '/task-management'
  id:
    | '__root__'
    | '/'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(members)/dashboard'
    | '/(members)/project-management'
    | '/(members)/task-management'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  membersDashboardRoute: typeof membersDashboardRoute
  membersProjectManagementRoute: typeof membersProjectManagementRoute
  membersTaskManagementRoute: typeof membersTaskManagementRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  membersDashboardRoute: membersDashboardRoute,
  membersProjectManagementRoute: membersProjectManagementRoute,
  membersTaskManagementRoute: membersTaskManagementRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)/login",
        "/(auth)/register",
        "/(members)/dashboard",
        "/(members)/project-management",
        "/(members)/task-management"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/(members)/dashboard": {
      "filePath": "(members)/dashboard.tsx"
    },
    "/(members)/project-management": {
      "filePath": "(members)/project-management.tsx"
    },
    "/(members)/task-management": {
      "filePath": "(members)/task-management.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
